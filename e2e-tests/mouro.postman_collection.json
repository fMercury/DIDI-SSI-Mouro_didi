{
	"info": {
		"_postman_id": "0e759bfd-f39e-44f1-9ab9-a5419d16bf3a",
		"name": "mouro",
		"description": "Mouro testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "graphql",
			"item": [
				{
					"name": "me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ad3326e-b3bf-4836-b6e3-2cd741485a4f",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"did should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.me.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{\\n\\tme{\\n    did\\n  }\\n}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "addEdge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b3cd09-8557-44c3-9ae9-48ba200fc422",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the edgeHash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addEdge.jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"mutation{addEdge(edgeJWT:\\\"{{edgeJWT}}\\\"){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "edgeByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b3cd09-8557-44c3-9ae9-48ba200fc422",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the edgeHash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{edgeByHash(hash:\\\"{{edgeHash}}\\\"){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "edgeByHash (authz)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b3cd09-8557-44c3-9ae9-48ba200fc422",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the edgeHash\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.edgeByHash.jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{edgeByHash(hash:\\\"{{edgeHash}}\\\"){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "findEdges",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b3cd09-8557-44c3-9ae9-48ba200fc422",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the findEdges\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{findEdges(toDID:[\\\"{{did}}\\\"]){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "findEdges (public no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b3cd09-8557-44c3-9ae9-48ba200fc422",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the findEdges\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{findEdges(toDID:[\\\"{{did}}\\\"]){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "findEdges (authz)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c51a4bbf-6cc8-46b2-8ed9-931cb6dac1c0",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"});",
									"",
									"pm.test(\"hash returned should be the findEdges\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].hash).to.eql(pm.environment.get(\"edgeHash\"));",
									"});",
									"",
									"pm.test(\"from returned should be the did2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].from.did).to.eql(pm.environment.get(\"did2\"));",
									"});",
									"",
									"pm.test(\"to returned should be the did\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].to.did).to.eql(pm.environment.get(\"did\"));",
									"});",
									"pm.test(\"type returned should be ALL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].type).to.eql(\"ALL\");",
									"});",
									"pm.test(\"visibility returned should be ANY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].visibility).to.eql(\"ANY\");",
									"});",
									"pm.test(\"tag returned should be test\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].tag).to.eql(\"test\");",
									"});",
									"pm.test(\"jwt returned should be edgeJWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.findEdges[0].jwt).to.eql(pm.environment.get(\"edgeJWT\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"{findEdges(fromDID:[\\\"{{did2}}\\\"]){hash,jwt,from {did},to{did},type,time,visibility,retention,tag,data}}\"\n}"
						},
						"url": {
							"raw": "{{mouroUrl}}/graphql",
							"host": [
								"{{mouroUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}